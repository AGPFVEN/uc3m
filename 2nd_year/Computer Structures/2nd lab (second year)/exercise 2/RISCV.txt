.data
a: .word 35, 15
b: .word 10, 20
.text
no_ext:
# To implement with RISC-V instructions (without extension)
# if (a == b):
#
return a * b;
# else
#
return a + b;
ret

----------------------------
#
# WepSIM (https://wepsim.github.io/wepsim/)
#	18 9
.data
a: .word 35, 15
b: .word 10, 20

.text
no_ext:
    #Not use arguments
    mv t0, a0
    mv t1, a1

    #Lo$ad r$eal part
    lw t2, t0
    lw t3, t1

    #Load imaginary part
    addi t0, t0, 4
    addi t1, t1, 4
    lw t4, t0
    lw t5, t1

    #Check
    bne t2, t3, not_eq_ne
    bne t4, t5, not_eq_ne
    #Same complex numbers
    mul t0, t2, t4
    mul t1, t3, t5
    sub a0, t0, t1
    mul t0, t2, t5
    mul t1, t3, t4
    sub a1, t0, t1
    ret

#Check different 
not_eq_ne:
    add a0, t2, $t4
    add a1, t3, $t5

main:   
    rdcycle s0
    la a0, a
    la a1, b
    call no_ext
    rdcycle s2
    sub s2 s2 s0
-----------------------------

#
# WepSIM (https://wepsim.github.io/wepsim/)
#
.data


.text
main:
    #
    # Arithmetic instructions
    #

    # add: $5 = 2 + 1
    li  $2 2
    li  $3 1
    add $5 $2 $3

    # subtract: $5 = 2 - 1
    li  $2 2
    li  $3 1
    sub $5 $2 $3

    # multiply: $5 = 2 * 3
    li  $2 2
    li  $3 3
    mul $5 $2 $3

    # divide: $5 = 3 / 2
    li  $2 3
    li  $3 2
    div $5 $2 $3

    # reminder: $5 = 3 % 2
    li  $2 3
    li  $3 2
    rem $5 $2 $3

    #
    # Logic instructions
    #

    # and: $5 = 1 & 0
    li  $2 1
    li  $3 0
    and $5 $2 $3

    # or: $5 = 1 | 0
    li  $2 1
    li  $3 0
    or $5 $2 $3

    # not: $5 = ! $5
    li  $5 0
    not $5

    # xor: $5 = 1 ^ 0
    li  $2 1
    li  $3 0
    xor $5 $2 $3

    #
    # Bitwise instructions
    #

    # shift right logical: $5 = 8 >> 2
    li  $2 8
    srl $5 $2 2

    # shift left logical: $5 = 1 << 3
    li  $2 2
    sll $5 $2 3