{
  "metadata": {
    "kernelspec": {
      "name": "node_nteract",
      "language": "javascript",
      "display_name": "Node.js (nteract)"
    },
    "kernel_info": {
      "name": "node_nteract"
    },
    "language_info": {
      "name": "javascript",
      "version": "8.2.1",
      "mimetype": "application/javascript",
      "file_extension": ".js"
    },
    "title": "WepSIM ",
    "nteract": {
      "version": "nteract-on-jupyter@2.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "## mode",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "ep",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "mode",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## firmware",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "##\n## Microcode Section\n##\n\nbegin\n{\n   fetch: (T2, C0),\n          (TA, R, BW=11, M1=1, C1=1),\n          (M2, C2, T1, C3),\n          (A0, B=0, C=0)\n}\n\n#\n# ALU\n#\nla  reg addr {\n    co=010001,\n    nwords=2,\n\treg=reg(25,21),\n    addr=address(63,32)abs,\n    help='r1 = addr/32',\n    {\n        (T2, C0),\n        (TA, R, BW=11, M1=1, C1),\n        (M2, C2, T1, LC, MR=0, SELC=10101, A0, B, C=0)\n    }\n}\n\nlc\treg1 reg2 (reg3) {\n  \tco=010011,\n    nwords=1,\n    reg1=reg(25,21),\n    reg2=reg(20,16),\n    reg3=reg(15,11),\n    {\n        (MR=0, SELA=01011, T9, C0, C4),\n        (TA, R, BW=11, M1=1, C1, MA=1, MB=10, SELCOP=01010, MC, T6, C0, SELP=11, M7=1, C7),\n        (TA, R, BW=11, M1=1, C1, T1, LC, MR=0, SELC=10101, SE),\n        (T1, LC, MR=0, SELC=10000, SE, A0, B, C=0)\n\t}\n}\n\naddc reg1 reg2 reg3 reg4 {\n    co=010100,\n    nwords=1, \n    reg1=reg(25,21),\n    reg2=reg(20,16),\n    reg3=reg(15,11),\n    reg4=reg(10, 6),\n    {\n        (MR=0, SELA=10101, MA=0, SELB=01011, MB=00, SELCOP=1010, MC, T6, SELC=10101, LC, SELP=11, M7, C7),\n        (MR=0, SELA=10000, MA=0, SELB=00110, MB=00, SELCOP=1010, MC, T6, SELC=10000, LC, SELP=11, M7, C7, A0, B, C=0)\n    }\n}\n\nmulc reg1 reg2 reg3 reg4 {\n    co=010101,\n    nwords=1, \n    reg1=reg(25,21),\n    reg2=reg(20,16),\n    reg3=reg(15,11),\n    reg4=reg(10, 6),\n    {\n        (MR=0, SELA=10101, MA=0, SELB=01011, MB=00, SELCOP=1100, MC, T6, C4, SELP=11, M7, C7),      #RT1  <- reg1 * reg3\n        (MR=0, SELA=10000, MA=0, SELB=00110, MB=00, SELCOP=1100, MC, T6, C5, SELP=11, M7, C7),      #RT2  <- reg2 * reg4\n        (MA=1, MB=01, SELCOP=1011, MC, SELP=11, M7, C7, C6),                                        #RT3  <- RT1 - RT2\n        (MR=0, SELA=10101, MA=0, SELB=00110, MB=00, SELCOP=1100, MC, T6, C4, SELP=11, M7, C7),      #RT1  <- reg1 * reg4\n        (MR=0, SELA=10000, MA=0, SELB=01011, MB=00, SELCOP=1100, MC, T6, C5, SELP=11, M7, C7),      #RT2  <- reg2 * reg3\n        (MA=1, MB=01, SELCOP=1010, MC, SELP=11, M7, C7, T6, SELC=10000, LC),                        #reg2 <- RT1 + RT2\n        (T7, LC, SELC=10101, A0, B, C=0)                                                            #reg1 <- RT3\n    }\n}\n\nhcf {\n    co=100011,\n    nwords=1,\n    {\n        (EXCODE=0, T11, M2=0, C2, M7, C7, A0, B, C=0)\n    }\n}\n\nbeqc reg1 reg2 reg3 reg4 offset {\n    co=110100,\n    nwords=1,\n    reg1=reg(25,21),\n    reg2=reg(20,16),\n    reg3=reg(15,11),\n    reg4=reg(10, 6),\n    offset=address(5,0)rel,\n    help='if ($r1 == $r2) pc += offset',\n    {\n             (T8, C5),\n             (SELA=10101, SELB=01011, MC=1, SELCOP=1011, SELP=11, M7, C7),\n             (A0=0, B=1, C=110, MADDR=bck2ftch),\n             (SELA=10000, SELB=00110, MC=1, SELCOP=1011, SELP=11, M7, C7),\n             (A0=0, B=1, C=110, MADDR=bck2ftch),\n             (T5, M7=0, C7),\n             (T2, C4),\n             (SE=1, OFFSET=0, SIZE=10000, T3, C5),\n             (MA=1, MB=1, MC=1, SELCOP=1010, T6, C2, A0=1, B=1, C=0),\n   bck2ftch: (T5, M7=0, C7),\n             (A0, B, C=0)\n    }\n}\n\ncall addr {\n    co=100001,\n    nwords=1,\n    addr=address(19, 0)rel,\n    help='ra <- pc, pc <- addr',\n    {\n        (T2, MR=1, SELC=00001, LC),\n        (SE, SIZE=10100, OFFSET=0, T3, M2=1, C2, A0, B, C=0)\n    }\n}\n\nret {\n    co=100010,\n    nwords=1,\n    help='pc <- ra'\n    {\n        (MR=1, SELA=00001, T9, M2=0, C2, A0, B, C=0)\n    }\n}\n\nsc reg1, reg2, (reg3) {\n    co=010010,\n    nwords=1,\n    reg1=reg(25,21),\n    reg2=reg(20,16),\n    reg3=reg(15,11),\n    {\n        (MR=0, SELA=01011, T9, C0, C4),\n        (MR=0, SELA=10101, T9, M1=0, C1),\n        (BW=11, TA, TD, W, MA=1, MB=10, SELCOP=1010, MC=1, T6, C0),\n        (MR=0, SELA=10000, T9, M1=0, C1),\n        (BW=11, TA, TD, W, A0, B, C=0)\n    }\n}\nlw rd offset(rs1) {\n      co=111111,\n      nwords=1,\n      rd=reg(25,21),\n      offset=inm(15,0),\n      rs1=reg(20,16),\n      help='rd = (MEM[rs1+offset+3] .. MEM[rs1+offset])',\n      {\n          (SE=1, OFFSET=0, SIZE=10000, T3=1, C5=1),\n          (MR=0, SELA=10000, MA=0, MB=1, MC=1, SELCOP=1010, T6=1, C0=1),\n          (TA=1, R=1, BW=11, M1=1, C1=1),\n          (T1=1, LC=1, MR=0, SELC=10101, A0=1, B=1, C=0)\n      }\n}\n\naddi rd rs1 inm {\n      co=111111,\n      nwords=1,\n      rd=reg(25,21),\n      rs1=reg(20,16),\n      inm=inm(11,0),\n      help='rd = rs1 + SignEx(inm)',\n      {\n          (SE=1, OFFSET=0, SIZE=01100, T3=1, C4=1),\n          (MC=1, MR=0, SELB=10000, MA=1, MB=0, SELCOP=1010, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n      }\n}\n\nbne rs1 rs2 offset {\n      co=111111,\n      nwords=1,\n      rs1=reg(25,21),\n      rs2=reg(20,16),\n      offset=address(15,0)rel,\n      help='if (rs1 != rs2) pc += offset',\n      {\n          (T8, C5),\n          (SELA=10101, SELB=10000, MC=1, SELCOP=1011, SELP=11, M7, C7),\n          (A0=0, B=0, C=110, MADDR=bck3ftch),\n          (T5, M7=0, C7),\n          (T2, C4),\n          (SE=1, OFFSET=0, SIZE=10000, T3, C5),\n          (MA=1, MB=1, MC=1, SELCOP=1010, T6, C2, A0=1, B=1, C=0),\nbck3ftch: (T5, M7=0, C7),\n          (A0=1, B=1, C=0)\n      }\n}\nmul reg1 reg2 reg3 {\n      co=111111,\n      nwords=1,\n      reg1=reg(25,21),\n      reg2=reg(20,16),\n      reg3=reg(15,11),\n      help='reg1 = reg2 * reg3',\n      {\n          (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=1100, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n      }\n}\nsub reg1 reg2 reg3 {\n      co=111111,\n      nwords=1,\n      reg1=reg(25,21),\n      reg2=reg(20,16),\n      reg3=reg(15,11),\n      help='r1 = r2 - r3',\n      {\n          (MC=1, MR=0, SELB=1011, SELA=10000, MA=0, MB=0, SELCOP=1011, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n      }\n}\nadd reg1 reg2 reg3 {\n      co=111111,\n      nwords=1,\n      reg1=reg(25,21),\n      reg2=reg(20,16),\n      reg3=reg(15,11),\n      help='r1 = r2 + r3',\n      {\n          (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=1010, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n      }\n}\n# RDCYCLE rd      Load clock cycles     rd ← ux(clock_cycles_acc)\nrdcycle reg1  {\n      co=111111,\n      nwords=1,\n      reg1=reg(25,21),\n      help='reg1 = load accumulated clock cycles',\n      {\n           (MH=1, T12=1, SELC=10101, LC=1, A0=1, B=1, C=0)\n      }\n}\n\npseudoinstructions{\n# mv rd, rs1        addi rd, rs, 0        Copy register\nmv rd=reg, rs=reg\n    {\n        addi rd, rs, 0\n    }\n}\n\n##\n## Register Section\n##\nregisters\n{\n    0=(zero,  x0),\n    1=(ra,    x1),\n    2=(sp,    x2) (stack_pointer),\n    3=(gp,    x3),\n    4=(tp,    x4),\n    5=(t0,    x5),\n    6=(t1,    x6),\n    7=(t2,    x7),\n    8=(s0,    x8),\n    9=(s1,    x9),\n    10=(a0,  x10),\n    11=(a1,  x11),\n    12=(a2,  x12),\n    13=(a3,  x13),\n    14=(a4,  x14),\n    15=(a5,  x15),\n    16=(a6,  x16),\n    17=(a7,  x17),\n    18=(s2,  x18),\n    19=(s3,  x19),\n    20=(s4,  x20),\n    21=(s5,  x21),\n    22=(s6,  x22),\n    23=(s7,  x23),\n    24=(s8,  x24),\n    25=(s9,  x25),\n    26=(s10, x26),\n    27=(s11, x27),\n    28=(t3,  x28),\n    29=(t4,  x29),\n    30=(t5,  x30),\n    31=(t6,  x31)\n}",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "firmware",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## assembly",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": ".data\n\tw1: .word 12, 40\n    w2: .word 12, 40\n.text\nwith_ext:\n    #Load complex numbers into registers\n    lc t2 t3 (t0)\n    lc t4 t5 (t1)\n\n    #Check if eq\n    beqc t2 t3 t4 t5 diff\n    mulc t2 t3 t4 t5\n    ret\ndiff:\n    addc t2 t3 t4 t5\n    ret\n\nno_ext:\n    #Not use arguments\n    mv t0, a0\n    mv t1, a1\n\n    #Lo$ad r$eal part\n    lw t2, 0(t0)\n    lw t3, 0(t1)\n\n    #Load imaginary part\n    addi t0, t0, 4\n    addi t1, t1, 4\n    lw t4, 0(t0)\n    lw t5, 0(t1)\n\n    #Check\n    bne t2, t3, not_eq_ne\n    bne t4, t5, not_eq_ne\n    #Same complex numbers\n    mul t0, t2, t4\n    mul t1, t3, t5\n    sub a0, t0, t1\n    mul t0, t2, t5\n    mul t1, t3, t4\n    sub a1, t0, t1\n    ret\n\n#Check different \nnot_eq_ne:\n    add a0, t2, t4\n    add a1, t3, t5\n\nmain:\n    rdcycle s0\n\n    #Load address of complex numbers\n    la t0 w1\n    la t1 w2\n    call with_ext\n    rdcycle s1\n    sub s1 s1 s0\n\n    rdcycle s0\n    la t0 w1\n    la t1 w2\n    call no_ext\n    rdcycle s2\n    sub s2 s2 s0\n\n    hcf",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "assembly",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## state_current",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "{\n  \"time\": 1701636096164,\n  \"title\": \"clock 66 @ &#181;address 0\",\n  \"title_short\": \"clock 66,<br>&#181;add 0\",\n  \"content\": \"register R1 = 0x80a0; register R2 = 0x100000; register R5 = 0x1000; register R6 = 0x1008; register R8 = 0x22; register R9 = 0xfffffffc; register R18 = 0xffffffde; register SR = 0x60000000; memory 0x1000 = 0xc; memory 0x1004 = 0x28; memory 0x1008 = 0xc; memory 0x100c = 0x28; memory 0x8000 = 0x4cfc2800; memory 0x8004 = 0x4fbe3000; memory 0x8008 = 0xd0fcef88; memory 0x800c = 0x54fcef80; memory 0x8010 = 0x88000000; memory 0x8014 = 0x50fcef80; memory 0x8018 = 0x88000000; memory 0x801c = 0x4aa0000; memory 0x8020 = 0x4cb0000; memory 0x8024 = 0xe50000; memory 0x8028 = 0x3860000; memory 0x802c = 0x4a50004; memory 0x8030 = 0x4c60004; memory 0x8034 = 0x3a50000; memory 0x8038 = 0x3c60000; memory 0x803c = 0x8fc0020; memory 0x8040 = 0xbbe001c; memory 0x8044 = 0xca7e800; memory 0x8048 = 0xcdcf000; memory 0x804c = 0x11453000; memory 0x8050 = 0xca7f000; memory 0x8054 = 0xcdce800; memory 0x8058 = 0x11653000; memory 0x805c = 0x88000000; memory 0x8060 = 0x1547e800; memory 0x8064 = 0x157cf000; memory 0x8068 = 0x19000000; memory 0x806c = 0x44a00000; memory 0x8070 = 0x1000; memory 0x8074 = 0x44c00000; memory 0x8078 = 0x1008; memory 0x807c = 0x840fff80; memory 0x8080 = 0x19200000; memory 0x8084 = 0x11294000; memory 0x8088 = 0x19000000; memory 0x808c = 0x44a00000; memory 0x8090 = 0x1000; memory 0x8094 = 0x44c00000; memory 0x8098 = 0x1008; memory 0x809c = 0x840fff7c; memory 0x80a0 = 0x1a400000; memory 0x80a4 = 0x12524000; memory 0x80a8 = 0x8c000000; \"\n}",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "state_current",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## state_history",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "[]",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "state_history",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## record",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "[]",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "record",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## tag",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "12/3/2023, 9:41:32 PM",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "tag",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## notify",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "true",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "notify",
        "type": "boolean",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    }
  ]
}